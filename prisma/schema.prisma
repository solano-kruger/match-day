// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
  reservation User_Reservation[]   // Adicionando a relação inversa
}



model Sport_Court {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  reservated    Boolean
  description   String?   @db.Text
  size          String    @db.Char(2)
  location      String    @db.VarChar(255)
  start_datetime DateTime  @db.DateTime
  end_datetime   DateTime  @db.DateTime
  price         Decimal   @db.Decimal(10, 2)
  reservation  Reservation[]   // Adicionando a relação inversa
}


model Reservation {
  id            Int               @id @default(autoincrement())
  sport_court_id  Int
  status        String            @db.VarChar(50)
  sportCourt    Sport_Court       @relation(fields: [sport_court_id], references: [id])
  user_Reservations User_Reservation[]
  review         Review[]
}



model User_Reservation {
  id            Int       @id @default(autoincrement())
  user_id        Int       // Ensure this matches the database column name exactly
  reservation_id Int
  user          User      @relation(fields: [user_id], references: [id])
  reservation   Reservation @relation(fields: [reservation_id], references: [id])

  @@map("User_Reservation") 
}

model Review {
  id            Int       @id @default(autoincrement())
  reservation_id Int
  rating        Int
  comment       String?
  reservation   Reservation @relation(fields: [reservation_id], references: [id])
}